from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager
import time
import random
import re

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
USERNAME = ""
PASSWORD = ""
DOMAIN_GROUP_NAME = ""
LOGIN_URL = ""

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ ---
safe_name = re.sub(r'[^a-zA-Z0-9_]', '_', DOMAIN_GROUP_NAME)
filename = f"fail_{safe_name}.txt"

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ ---
def wait_real(short=False):
    time.sleep(random.uniform(0.9, 1.4 if short else 2.2))

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–∞ ---
def setup_driver():
    options = Options()
    options.add_argument("--start-maximized")
    return webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)

driver = setup_driver()

try:
    # --- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ---
    driver.get(LOGIN_URL)
    wait_real()
    driver.find_element(By.XPATH, '//input[@type="email"]').send_keys(USERNAME)
    wait_real()
    driver.find_element(By.XPATH, '//input[@type="password"]').send_keys(PASSWORD)
    wait_real()
    driver.find_element(By.XPATH, '//button[contains(@class, "ant-btn") and .//span[text()="Login"]]').click()
    time.sleep(5)

    # --- –û—Ç–∫—Ä—ã—Ç—å —Ä–∞–∑–¥–µ–ª Domains ---
    driver.find_element(By.XPATH, '//span[contains(@class, "ant-menu-title-content") and text()="Domains"]').click()
    wait_real()

    # --- –ü–µ—Ä–µ–π—Ç–∏ –≤ –Ω—É–∂–Ω—É—é –≥—Ä—É–ø–ø—É ---
    driver.find_element(By.XPATH, f'//a[contains(text(), "{DOMAIN_GROUP_NAME}")]').click()
    time.sleep(5)

    with open(filename, "w", encoding="utf-8") as fail_file:
        while True:
            time.sleep(3)

            # --- –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö ---
            rows = driver.find_elements(By.CSS_SELECTOR, "tr.ant-table-row")
            for row in rows:
                try:
                    health = row.find_element(By.CSS_SELECTOR, "td:nth-child(4)").text.strip()
                    if "Attention" in health:
                        domain = row.find_element(By.CSS_SELECTOR, "td:nth-child(3) a").text.strip()
                        print(f"‚ö†Ô∏è Attention: {domain}")
                        fail_file.write(domain + "\n")
                except:
                    continue

            # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
            current_page = int(driver.find_element(By.CSS_SELECTOR, "li.ant-pagination-item-active").get_attribute("title"))

            # --- –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ "Next Page" ---
            next_li = driver.find_element(By.CSS_SELECTOR, "li.ant-pagination-next")
            disabled = next_li.get_attribute("aria-disabled")
            if disabled == "true":
                print("‚úÖ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞.")
                break

            try:
                # --- –£–±—Ä–∞—Ç—å –º–µ—à–∞—é—â–µ–µ –æ–∫–Ω–æ –æ–ø—Ä–æ—Å–∞ PostHog ---
                driver.execute_script("""
                    let el = document.querySelector('div[class^="PostHogSurvey-"]');
                    if (el) {
                        el.style.display = "none";
                    }
                """)

                # --- –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
                next_btn = next_li.find_element(By.TAG_NAME, "button")
                next_btn.click()
                print(f"‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {current_page + 1}")

                # --- –û–∂–∏–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
                for _ in range(20):  # –º–∞–∫—Å–∏–º—É–º 5 —Å–µ–∫—É–Ω–¥
                    time.sleep(0.25)
                    new_page = int(driver.find_element(By.CSS_SELECTOR, "li.ant-pagination-item-active").get_attribute("title"))
                    if new_page != current_page:
                        break
                else:
                    raise Exception("‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∞—Å—å –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞")

                wait_real()

            except Exception as e:
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ:", e)
                break

except Exception as e:
    print("‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:", e)

finally:
    print("üîö –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.")
    driver.quit()
